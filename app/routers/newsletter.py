"""
Endpoints de gestion de la newsletter avec double opt-in.
Inscription, confirmation, d√©sinscription conforme RGPD.
"""

from fastapi import APIRouter, HTTPException, Request, Query
from fastapi.responses import RedirectResponse, JSONResponse
from pydantic import BaseModel, EmailStr
from typing import Optional
import secrets
import os
import logging

from app.models.subscriber import (
    SubscribeRequest,
    UnsubscribeRequest,
    SubscriberStatus,
    SubscriberSource,
    SubscriberStats
)
from app.repositories.subscriber_repo import subscriber_repo
from app.services.email.jwt_utils import (
    generate_confirmation_token,
    generate_unsubscribe_token,
    verify_confirmation_token,
    verify_unsubscribe_token
)
from app.services.email.mailjet_client import (
    send_confirmation_email,
    send_welcome_email
)

logger = logging.getLogger(__name__)
router = APIRouter()

# URL de base du frontend (pour les redirections)
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")


@router.post("/subscribe", response_model=dict)
async def subscribe_to_newsletter(request: SubscribeRequest, req: Request):
    """
    Endpoint d'inscription √† la newsletter avec double opt-in.
    
    Flow:
    1. Cr√©e l'abonn√© avec status='pending'
    2. G√©n√®re un token JWT de confirmation
    3. Envoie un email avec lien de confirmation
    4. Retourne un message de succ√®s
    
    Args:
        request: Donn√©es d'inscription (email + consentement)
        req: Request FastAPI pour r√©cup√©rer l'IP et user agent
        
    Returns:
        Message de succ√®s
    """
    email = request.email.strip().lower()
    
    # V√©rifier le consentement RGPD
    if not request.consent_accepted:
        raise HTTPException(
            status_code=400,
            detail="Le consentement RGPD doit √™tre accept√© pour s'inscrire"
        )
    
    # V√©rifier si l'email existe d√©j√†
    existing = subscriber_repo.get_by_email(email)
    
    if existing:
        # Si d√©j√† confirm√©, retourner erreur
        if existing.get("status") == SubscriberStatus.CONFIRMED.value:
            raise HTTPException(
                status_code=409,
                detail="Cet email est d√©j√† abonn√© √† la newsletter"
            )
        
        # Si pending, renvoyer l'email de confirmation
        if existing.get("status") == SubscriberStatus.PENDING.value:
            confirmation_token = generate_confirmation_token(email)
            send_confirmation_email(email, confirmation_token, FRONTEND_URL)
            return {
                "message": "Email de confirmation renvoy√©. Veuillez v√©rifier votre bo√Æte email."
            }
    
    # R√©cup√©rer IP et User Agent pour RGPD
    client_ip = req.client.host if req.client else None
    user_agent = req.headers.get("user-agent", "Unknown")
    
    # G√©n√©rer les tokens
    confirmation_token = generate_confirmation_token(email)
    unsubscribe_token = generate_unsubscribe_token(email)
    
    # Cr√©er l'abonn√©
    subscriber_data = {
        "email": email,
        "status": SubscriberStatus.PENDING.value,
        "consent_accepted": True,
        "consent_ip": client_ip,
        "consent_user_agent": user_agent,
        "source": SubscriberSource.FRONT_FORM.value,
        "confirmation_token": confirmation_token,
        "unsubscribe_token": unsubscribe_token
    }
    
    subscriber_id = subscriber_repo.create(subscriber_data)
    
    if not subscriber_id:
        raise HTTPException(
            status_code=500,
            detail="Erreur lors de l'inscription. Veuillez r√©essayer."
        )
    
    # Envoyer l'email de confirmation
    email_sent = send_confirmation_email(email, confirmation_token, FRONTEND_URL)
    
    if not email_sent:
        logger.warning(f"Failed to send confirmation email to {email}")
        # Ne pas bloquer l'inscription, mais logger
    
    logger.info(f"‚úÖ New subscriber (pending): {email}")
    
    return {
        "message": "Inscription r√©ussie ! Un email de confirmation vous a √©t√© envoy√©.",
        "email": email,
        "status": "pending"
    }


@router.get("/confirm")
async def confirm_subscription(token: str = Query(..., description="Token JWT de confirmation")):
    """
    Endpoint de confirmation d'inscription (double opt-in).
    
    Flow:
    1. V√©rifie le token JWT
    2. Passe l'abonn√© en status='confirmed'
    3. G√©n√®re un code promo
    4. Envoie un email de bienvenue avec le code promo
    5. Redirige vers une page de confirmation
    
    Args:
        token: Token JWT de confirmation
        
    Returns:
        Redirection vers la page de confirmation avec le code promo
    """
    # V√©rifier le token
    email = verify_confirmation_token(token)
    
    if not email:
        # Rediriger vers une page d'erreur
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/error?reason=invalid_token",
            status_code=302
        )
    
    # R√©cup√©rer l'abonn√©
    subscriber = subscriber_repo.get_by_email(email)
    
    if not subscriber:
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/error?reason=not_found",
            status_code=302
        )
    
    # V√©rifier s'il est d√©j√† confirm√©
    if subscriber.get("status") == SubscriberStatus.CONFIRMED.value:
        # D√©j√† confirm√©, rediriger avec le code promo existant
        promo_code = subscriber.get("promo_code", "")
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/confirmed?promo={promo_code}&already=true",
            status_code=302
        )
    
    # G√©n√©rer un code promo
    promo_code = f"EC10-{secrets.token_hex(3).upper()}"
    
    # Confirmer l'abonn√©
    success = subscriber_repo.confirm(email, promo_code)
    
    if not success:
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/error?reason=update_failed",
            status_code=302
        )
    
    # Envoyer l'email de bienvenue
    welcome_sent = send_welcome_email(email, promo_code)
    
    if not welcome_sent:
        logger.warning(f"Failed to send welcome email to {email}")
    
    logger.info(f"‚úÖ Subscriber confirmed: {email} - Promo: {promo_code}")
    
    # Rediriger vers la page de confirmation avec le code promo
    return RedirectResponse(
        url=f"{FRONTEND_URL}/newsletter/confirmed?promo={promo_code}",
        status_code=302
    )


@router.post("/unsubscribe", response_model=dict)
async def unsubscribe_from_newsletter(request: UnsubscribeRequest):
    """
    Endpoint de d√©sinscription de la newsletter.
    
    Args:
        request: Token de d√©sinscription + raison optionnelle
        
    Returns:
        Message de confirmation
    """
    # V√©rifier le token
    email = verify_unsubscribe_token(request.token)
    
    if not email:
        raise HTTPException(
            status_code=400,
            detail="Token de d√©sinscription invalide ou expir√©"
        )
    
    # R√©cup√©rer l'abonn√©
    subscriber = subscriber_repo.get_by_email(email)
    
    if not subscriber:
        raise HTTPException(
            status_code=404,
            detail="Abonn√© introuvable"
        )
    
    # D√©sinscrire
    success = subscriber_repo.unsubscribe(email, request.reason)
    
    if not success:
        raise HTTPException(
            status_code=500,
            detail="Erreur lors de la d√©sinscription"
        )
    
    logger.info(f"üì≠ Subscriber unsubscribed: {email}")
    
    return {
        "message": "Vous avez √©t√© d√©sinscrit de la newsletter avec succ√®s.",
        "email": email
    }


@router.get("/unsubscribe")
async def unsubscribe_get(token: str = Query(..., description="Token de d√©sinscription")):
    """
    Endpoint GET de d√©sinscription (lien dans les emails).
    Redirige vers une page de confirmation de d√©sinscription.
    """
    # V√©rifier le token
    email = verify_unsubscribe_token(token)
    
    if not email:
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/error?reason=invalid_unsubscribe_token",
            status_code=302
        )
    
    # D√©sinscrire directement
    success = subscriber_repo.unsubscribe(email, "D√©sinscription via lien email")
    
    if not success:
        return RedirectResponse(
            url=f"{FRONTEND_URL}/newsletter/error?reason=unsubscribe_failed",
            status_code=302
        )
    
    logger.info(f"üì≠ Subscriber unsubscribed via link: {email}")
    
    # Rediriger vers une page de confirmation
    return RedirectResponse(
        url=f"{FRONTEND_URL}/newsletter/unsubscribed",
        status_code=302
    )


@router.get("/stats", response_model=SubscriberStats)
async def get_subscriber_stats():
    """
    Endpoint pour r√©cup√©rer les statistiques des abonn√©s.
    (Protection admin recommand√©e en production)
    """
    stats = subscriber_repo.get_stats()
    return SubscriberStats(**stats)


class ResendConfirmationRequest(BaseModel):
    """Requ√™te de renvoi d'email de confirmation"""
    email: EmailStr


@router.post("/resend-confirmation", response_model=dict)
async def resend_confirmation(request: ResendConfirmationRequest):
    """
    Renvoie l'email de confirmation pour un abonn√© pending.
    """
    email = request.email.strip().lower()
    
    # R√©cup√©rer l'abonn√©
    subscriber = subscriber_repo.get_by_email(email)
    
    if not subscriber:
        raise HTTPException(
            status_code=404,
            detail="Email non trouv√© dans notre base"
        )
    
    if subscriber.get("status") != SubscriberStatus.PENDING.value:
        raise HTTPException(
            status_code=400,
            detail="Cet email est d√©j√† confirm√© ou inactif"
        )
    
    # G√©n√©rer un nouveau token
    confirmation_token = generate_confirmation_token(email)
    
    # Mettre √† jour le token
    subscriber_repo.update(email, {"confirmation_token": confirmation_token})
    
    # Renvoyer l'email
    email_sent = send_confirmation_email(email, confirmation_token, FRONTEND_URL)
    
    if not email_sent:
        raise HTTPException(
            status_code=500,
            detail="Erreur lors de l'envoi de l'email"
        )
    
    return {
        "message": "Email de confirmation renvoy√© avec succ√®s"
    }
